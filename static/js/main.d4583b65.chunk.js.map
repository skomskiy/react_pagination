{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pagesCount","result","Math","floor","getPages","pages","firstPage","lastPage","prevPage","nextPage","handleArrows","page","className","type","classNames","disabled","onClick","href","map","active","items","App","useState","setPerPage","setCurrentPage","maxEnd","itemEnd","itemStart","id","value","onChange","event","currentTarget","htmlFor","slice","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EDND,SAAkBH,EAAiBD,GACxC,IAAIK,EAAS,EAUb,OARIL,EAAQC,IAAY,IACtBI,EAASL,EAAQC,GAGfD,EAAQC,IAAY,IACtBI,EAASC,KAAKC,MAAMP,EAAQC,EAAU,IAGjCI,ECLYG,CAASP,EAASD,GAC/BS,EAAQhB,EAAW,EAAGW,GAEtBM,EAA4B,IAAhBR,EACZS,EAAWT,IAAgBE,EAC3BQ,EAAWV,EAAc,EACzBW,EAAWX,EAAc,EAEzBY,EAAe,SAACC,GAChBA,EAAOX,GAAcW,EAAO,GAIhCZ,EAAaY,IASf,OACE,qBAAIC,UAAU,aAAd,UACE,6BACE,wBACEC,KAAK,SACLD,UACEE,IACE,YACA,CACEC,SAAUT,IAIhBU,QAAS,kBAAMN,EAAaF,IAV9B,SAYE,mBACE,UAAQ,WACRI,UAAU,YACVK,KAAI,WAAMT,GACV,gBAAeF,EAJjB,sBAWHD,EAAMa,KAAI,SAAAP,GAAI,OACb,6BACE,wBACEE,KAAK,SAELD,UACEE,IACE,YACA,CACEK,OAAQrB,IAAgBa,IAI9BK,QAAS,kBAAMjB,EAAaY,IAX9B,SAaE,mBACE,UAAQ,WACRC,UAAU,YACVK,KAAI,WAAMN,GAHZ,SAKGA,KAhBEA,QAsBX,6BACE,wBACEE,KAAK,SACLD,UACEE,IACE,YACA,CACEC,SAAUR,IAIhBS,QAAS,kBAAMN,EAAaD,IAV9B,SAYE,mBACE,UAAQ,WACRG,UAAU,YACVK,KAAI,WAAMR,GACV,gBAAeF,EAJjB,0BCjGJa,EAAQ/B,EAAW,EADV,IACqB6B,KAAI,SAAAzB,GAAC,qBAAYA,MAExC4B,EAAgB,WAC3B,MAAgBC,mBAJH,IAIN1B,EAAP,oBACA,EAA8B0B,mBAAS,GAAvC,mBAAOzB,EAAP,KAAgB0B,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOxB,EAAP,KAAoB0B,EAApB,KAMMC,EAAS5B,EAAUC,EACnB4B,EAAUD,EAAS7B,EAAQA,EAAQ6B,EACnCE,EAAYF,EAAS5B,EAS3B,OACE,sBAAKe,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWd,EADX,mBACiC6B,EAAY,EAD7C,cACoDD,EADpD,eACkE9B,EADlE,OAIA,sBAAKgB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRgB,GAAG,kBACHhB,UAAU,eACViB,MAAOhC,EACPiC,SAtBW,SACnBC,GAEAR,GAAYQ,EAAMC,cAAcH,OAChCL,EAAe,IAaT,UAOE,wBAAQK,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOI,QAAQ,kBAAkBrB,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACEhB,MAAOA,EACPC,QAASA,EACTC,YAAaA,EACbC,aA/Ce,SAACY,GACpBa,EAAeb,MAgDb,6BACGS,EAAMc,MAAMP,EAAWD,GAASR,KAAI,SAAAiB,GAAI,OACvC,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC7DlCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d4583b65.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n\nexport function getPages(perPage: number, total: number): number {\n  let result = 0;\n\n  if (total % perPage === 0) {\n    result = total / perPage;\n  }\n\n  if (total % perPage !== 0) {\n    result = Math.floor(total / perPage + 1);\n  }\n\n  return result;\n}\n","import classNames from 'classnames';\nimport { getNumbers, getPages } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const pagesCount = getPages(perPage, total);\n  const pages = getNumbers(1, pagesCount);\n\n  const firstPage = currentPage === 1;\n  const lastPage = currentPage === pagesCount;\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n\n  const handleArrows = (page: number) => {\n    if (page > pagesCount || page < 1) {\n      return;\n    }\n\n    onPageChange(page);\n  };\n\n  // const onKeyUpEnter = (e: React.KeyboardEvent<HTMLLIElement>) => {\n  //   if (e.key === 'Enter') {\n  //     handleArrows(prevPage);\n  //   }\n  // };\n\n  return (\n    <ul className=\"pagination\">\n      <li>\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'page-item',\n              {\n                disabled: firstPage,\n              },\n            )\n          }\n          onClick={() => handleArrows(prevPage)}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href={`#${prevPage}`}\n            aria-disabled={firstPage}\n          >\n            «\n          </a>\n        </button>\n      </li>\n\n      {pages.map(page => (\n        <li>\n          <button\n            type=\"button\"\n            key={page}\n            className={\n              classNames(\n                'page-item',\n                {\n                  active: currentPage === page,\n                },\n              )\n            }\n            onClick={() => onPageChange(page)}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n            >\n              {page}\n            </a>\n          </button>\n        </li>\n      ))}\n\n      <li>\n        <button\n          type=\"button\"\n          className={\n            classNames(\n              'page-item',\n              {\n                disabled: lastPage,\n              },\n            )\n          }\n          onClick={() => handleArrows(nextPage)}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href={`#${nextPage}`}\n            aria-disabled={lastPage}\n          >\n            »\n          </a>\n        </button>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState, ChangeEvent } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst amount = 42;\nconst items = getNumbers(1, amount).map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [total] = useState(amount);\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const onPageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const maxEnd = perPage * currentPage;\n  const itemEnd = maxEnd > total ? total : maxEnd;\n  const itemStart = maxEnd - perPage;\n\n  const onChangeFunc = (\n    event: ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setPerPage(+event.currentTarget.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${itemStart + 1} - ${itemEnd} of ${total})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={onChangeFunc}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={total}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={onPageChange}\n      />\n      <ul>\n        {items.slice(itemStart, itemEnd).map(item => (\n          <li data-cy=\"item\" key={item}>{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}